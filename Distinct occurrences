Distinct occurrences


.........

Given two strings s and t of length n and m respectively. Find the count of distinct occurrences of t in s as a sub-sequence modulo 109 + 7.

Example 1:

Input:
s = "banana" , t = "ban"
Output: 
3
Explanation: 
There are 3 sub-sequences:[ban], [ba n], [b an].
Example 2:

Input:
s = "geeksforgeeks" , t = "ge"
Output: 
6
Explanation: 
There are 6 sub-sequences:[ge], [ge], [g e], [g e] [g e] and [g e].
Your Task:
You don't need to read input or print anything.Your task is to complete the function subsequenceCount() which takes two strings as argument s and t and returns the count of the sub-sequences modulo 109 + 7.

Expected Time Complexity: O(n*m).
Expected Auxiliary Space: O(n*m).

Constraints:
1 ≤ n,m ≤ 1000

.......
class Solution
{
     int m;
    int n;
    int memo[][];
    int mod=(int)(1e9+7);
    int  subsequenceCount(String s, String t)
    {
    // Your code here
    m=s.length();
    n=t.length();
    memo=new int[m+1][n+1];
    for(int mem[]:memo)Arrays.fill(mem,-1);
       return solve(s,t,0,0);
    }
    int solve(String s,String t,int i,int j){
        if(j>=n)return 1;
        if(i>=m)return 0;
        
        if(memo[i][j]!=-1)return memo[i][j];
        int countways=0;
        
        if(t.charAt(j)==s.charAt(i)){
            //here we have two ways either we take this or skip
            countways=(countways%mod+solve(s,t,i+1,j)%mod)%mod;
            countways=(countways%mod+solve(s,t,i+1,j+1)%mod)%mod;
        }
        else countways=(countways%mod+solve(s,t,i+1,j)%mod)%mod;
        
        return memo[i][j]= countways;
    }
}

......
