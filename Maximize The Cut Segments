int solve(int n, int idx, vector<int>& lengths){
        if(n == 0){
            return 0;   
        }
        if(idx == 0){
            if(n % lengths[idx] == 0)
                return n / lengths[idx];
            return -1e9;
        }
        int take = -1e9;
        int noTake = solve(n, idx - 1, lengths);
        if(n - lengths[idx] >= 0)
            take = 1 + solve(n - lengths[idx], idx, lengths);
        return max(take, noTake);
    }
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        //Your code here
        vector<int> lengths = {x, y, z};
        int ans = solve(n, 2, lengths);
        return ans < 0 ? 0 : ans;
    }

......

Given an integer n denoting the Length of a line segment. You need to cut the line segment in such a way that the cut length of a line segment each time is either x , y or z. Here x, y, and z are integers.
After performing all the cut operations, your total number of cut segments must be maximum.

Note: if no segment can be cut then return 0.

Examples:

Input: n = 4, x = 2, y = 1, z = 1
Output: 4
Explanation: Total length is 4, and the cut
lengths are 2, 1 and 1.  We can make
maximum 4 segments each of length 1.
Input: n = 5, x = 5, y = 3, z = 2
Output: 2
Explanation: Here total length is 5, and
the cut lengths are 5, 3 and 2. We can
make two segments of lengths 3 and 2.
Expected Time Complexity : O(n)
Expected Auxiliary Space: O(n)

Constraints
1 <= n, x, y, z <= 104



