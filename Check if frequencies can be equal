Check if frequencies can be equal


.........

Given a string s which contains only lower alphabetic characters, check if it is possible to remove at most one character from this string in such a way that frequency of each distinct character becomes same in the string. Return true if it is possible to do else return false.

Note: The driver code print 1 if the value returned is true, otherwise 0.

Example 1:

Input:
s = "xyyz"
Output: 
1 
Explanation: 
Removing one 'y' will make frequency of each character to be 1.
Example 2:

Input:
s = "xxxxyyzz"
Output: 
0
Explanation: 
Frequency can not be made same by removing at most one character.
Your Task:  
You dont need to read input or print anything. Complete the function sameFreq() which takes a string as input parameter and returns a boolean value denoting if same frequency is possible or not.

Expected Time Complexity: O(|s|) 
Expected Auxiliary Space: O(1)

Constraints:
1 <= |s| <= 105

.........

class Solution {
    boolean sameFreq(String s) {
        // code here
        int[] freq=new int[26];
        char[] starray=s.toCharArray();
        
        for(int i=0;i<s.length();i++){
            freq[starray[i]-'a']++;
        }
        ArrayList<Integer>st=new ArrayList<>();
        int count=0;
        for(int i=0;i<freq.length;i++){
            if(st.contains(freq[i])){
                count++;
            }
            if(freq[i]>0){
                if(st.size()==0){
                    st.add(freq[i]);
                }
                else if(st.size()>0 && !st.contains(freq[i])){
                    int prev=st.get(st.size()-1);
                    int diff=Math.abs(freq[i]-prev);
                    if(diff>1){
                        return false;
                    }
                }
                if(count>1){
                    return false;
                }
                st.add(freq[i]);
            }
        }
        return true;
    }
}
