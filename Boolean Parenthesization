Boolean Parenthesization


.....

Given a boolean expression s of length n with following symbols.
Symbols
    'T' ---> true
    'F' ---> false
and following operators filled between symbols
Operators
    &   ---> boolean AND
    |   ---> boolean OR
    ^   ---> boolean XOR
Count the number of ways we can parenthesize the expression so that the value of expression evaluates to true.

Note: The answer can be large, so return it with modulo 1003

Example 1:

Input: 
n = 7
s = T|T&F^T
Output: 
4
Explaination: 
The expression evaluates to true in 4 ways ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and (T|((T&F)^T)).
Example 2:

Input: 
n = 5
s = T^F|F
Output: 
2
Explaination: 
((T^F)|F) and (T^(F|F)) are the only ways.
Your Task:
You do not need to read input or print anything. Your task is to complete the function countWays() which takes n and s as input parameters and returns number of possible ways modulo 1003.

Expected Time Complexity: O(n3)
Expected Auxiliary Space: O(n2)

Constraints:
1 ≤ n ≤ 200 

.........

class Solution{
    static int countWays(int n, String s){
        // code here
        String op = "";
        String op1 = "";
        for(int i =0;i<s.length();i++){
            if(s.charAt(i)=='&' || s.charAt(i) == '|' || s.charAt(i)=='^'){
                op += s.charAt(i);
            }
            else{
                op1 += s.charAt(i);
            }
        }
        int t = op1.length();
        int dpt[][] = new int[t][t];
        int dpf[][] = new int[t][t];
            for(int g =0;g<t;g++){
                for(int i=0,j = g;j<t;i++,j++){
                if(g==0){
                    char ch = op1.charAt(i);
                    if(ch=='T'){
                    dpt[i][j] = 1;
                    dpf[i][j] = 0;
                }
                else{
                    dpt[i][j] = 0;
                    dpf[i][j] = 1 ;
                }
            }
            else{
                for(int k = i;k<j;k++){
                    char opt = op.charAt(k);
                    int ltc = dpt[i][k];
                    int rtc = dpt[k+1][j];
                     int lfc = dpf[i][k];
                    int rfc = dpf[k+1][j];
                    if(opt == '&'){
                        dpt[i][j] += (ltc*rtc)%1003;
                        dpf[i][j] += (ltc*rfc + rfc*lfc + rtc*lfc)%1003;
                    }
                  else  if(opt =='|'){
                        dpt[i][j] += (ltc*rtc + ltc*rfc + lfc*rtc)%1003;
                        dpf[i][j] += (lfc*rfc)%1003; 
                    }
                  else{
                      dpt[i][j] += (lfc*rtc + ltc*rfc)%1003;
                      dpf[i][j] += (lfc*rfc + rtc*ltc)%1003;
                  }
                }
            }
        }
            }
            return dpt[0][t-1]%1003;
    }
}

