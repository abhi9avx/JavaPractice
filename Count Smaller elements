vector<int> constructLowerArray(vector<int> &nums) {
        int n=nums.size();
        vector<int> stack;
        vector<int> cnt(n,0);
        stack.push_back(nums[n-1]);
        cnt[n-1]=0;
        for(int i=n-2;i>=0;i--)
        {
            if(nums[i]>stack.back())
            {
                stack.push_back(nums[i]);
                cnt[i]=stack.size()-1;
            }
            else
            {
                int ind=lower_bound(stack.begin(),stack.end(),nums[i])-stack.begin();
                stack.insert(stack.begin()+ind,nums[i]);
                cnt[i]=ind;
            }
        }
        return cnt;
    }

,..........

Given an array arr containing non-negative integers. Count and return an array ans where ans[i] denotes the number of smaller elements on right side of arr[i].

Examples:

Input: arr[] = [12, 1, 2, 3, 0, 11, 4]
Output: [6, 1, 1, 1, 0, 1, 0]
Explanation: There are 6 smaller elements right after 12. There is 1 smaller element right after 1. And so on.
Input: arr[] = [1, 2, 3, 4, 5]
Output: [0, 0, 0, 0, 0]
Explanation: There are 0 smaller elements right after 1. There are 0 smaller elements right after 2. And so on.
Expected Time Complexity: O(n*logn)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ arr.size() ≤ 106
0 ≤ arr[i]  ≤ 108



.........

