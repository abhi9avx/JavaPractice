Given a binary tree of size n, find its reverse level order traversal. ie- the traversal must begin from the last level.

Example 1:

Input :
        1
      /   \
     3     2

Output: 
3 2 1
Explanation:
Traversing level 1 : 3 2
Traversing level 0 : 1
Example 2:

Input :
       10
      /  \
     20   30
    / \ 
   40  60

Output: 
40 60 20 30 10
Explanation:
Traversing level 2 : 40 60
Traversing level 1 : 20 30
Traversing level 0 : 10
Your Task: 
You don't need to read input or print anything. Complete the function reverseLevelOrder() which takes the root of the tree as input parameter and returns a list containing the reverse level order traversal of the given tree.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ n ≤ 104



,...........

vector<int> reverseLevelOrder(Node *root)
{
    // Initialize an empty vector to store the reverse level order traversal
    vector<int> ans;
    
    // Initialize a queue to perform level order traversal
    queue<Node*> q;
    q.push(root); // Enqueue the root node
    
    // Perform level order traversal
    while(!q.empty()){
        int sz = q.size(); // Get the current size of the queue (number of nodes in the current level)
        for(int i = 0; i < sz; ++i){
            Node* node = q.front(); q.pop(); // Dequeue the front node
            ans.push_back(node->data); // Push the data of the dequeued node into the vector
            
            // Enqueue the right child before the left child to maintain reverse level order
            if(node->right) q.push(node->right);
            if(node->left) q.push(node->left);
        }
    }
    
    // Reverse the vector to obtain the elements in reverse level order
    reverse(ans.begin(), ans.end());
    
    // Return the vector containing the reverse level order traversal
    return ans;
}
