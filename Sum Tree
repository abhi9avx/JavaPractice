 bool solve(Node*root, int &sum){
        if(root==NULL)return true;
         if(root->left==NULL && root->right==NULL){
             sum+=root->data;
             return true;
         }
         
         bool left= solve(root->left,sum);
         bool right = solve(root->right,sum);
         
         if(!left || !right)return false;
         if(root->data==sum){
             sum+=root->data;
             return true;
         }
         else return false;
    }
    
    bool isSumTree(Node* root) {
        if(root==NULL)return true;
        int sum1=0;
        int sum2=0;
        bool l= solve(root->left,sum1);
        bool r= solve(root->right,sum2);
       
        if(l&&r&& root->data==sum1+sum2)return true;
        return false;
    }

.......

Given a Binary Tree. Check for the Sum Tree for every node except the leaf node. Return true if it is a Sum Tree otherwise, return false.

A SumTree is a Binary Tree where the value of a node is equal to the sum of the nodes present in its left subtree and right subtree. An empty tree is also a Sum Tree as the sum of an empty tree can be considered to be 0. A leaf node is also considered a Sum Tree.

Examples :

Input:
    3
  /   \    
 1     2
Output: true
Explanation: The sum of left subtree and right subtree is 1 + 2 = 3, which is the value of the root node. Therefore,the given binary tree is a sum tree.
Input:
          10
        /    \
      20      30
    /   \ 
   10    10
Output: false
Explanation: The given tree is not a sum tree. For the root node, sum of elements in left subtree is 40 and sum of elements in right subtree is 30. Root element = 10 which is not equal to 30+40.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(Height of the Tree)

Constraints:
2 ≤ number of nodes ≤ 105
1 ≤ node value ≤ 105
