Given a binary search tree having n (n>1) nodes, the task is to find the minimum absolute difference between any two nodes.

Example 1:

Input:
Input tree

Output:
10
Explanation:
There are no two nodes whose absolute difference is smaller than 10.
Example 2:

Input:
Input tree

Output:
20
Explanation:
There are no two nodes whose absolute difference is smaller than 20.
Your Task:
You don't have to take any input. Just complete the function absolute_diff() , that takes root as input and return minimum absolute difference between any two nodes.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(Height of tree)

Constraints:
2 <= n <= 105
1 <= Node->data <= 109

class Solution
{
    
   void inorder(Node root, ArrayList<Integer> in)
    {
        if(root != null) 
        {
            inorder(root.left, in);
            in.add(root.data);
            inorder(root.right, in);
        }
    }

    int absolute_diff(Node root)
    {
        ArrayList<Integer> in = new ArrayList<>();
        inorder(root, in);
        
        int mini = Integer.MAX_VALUE;
        for(int i = 0; i < in.size() - 1; i++)
            mini = Math.min(mini, in.get(i + 1) - in.get(i));
            
        return mini;
    }
}

