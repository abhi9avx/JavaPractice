 int[][] rotateMatrix(int k, int arr[][]) {
        // code here
        
        int rows = arr.length;
        int cols = arr[0].length;
        int[][] ans = new int[rows][cols];
        k = k % cols;
        int j = 0;

        for (int[] ar : arr) {
            ans[j] = rotationarr(ar, k);
            j++;
        }
        return ans;
    }
    
    private static int[] rotationarr(int[] arr, int k) {
        int n = arr.length,j=0;
        int [] ans = new int[n];
//        if(n%k==0) return arr;
        k = k%n;
        for(int i=k;i<n && j<n;i++){
            ans[j++] = arr[i];
        }
        for(int i=0;i<k && j<n;i++){
            ans[j++] = arr[i];
        }
        return ans;
    }
........

You are given an integer k and matrix mat. Rotate the elements of the given matrix to the left k times and return the resulting matrix.

Examples:

Input: k=1, mat=[[1,2,3],[4,5,6],[7,8,9]]
Output:
2 3 1
5 6 4
8 9 7
Explanation: Rotate the matrix by one
1 2 3       2 3 1
4 5 6  =>  5 6 4
7 8 9       8 9 7
Input: k=2, mat=[[1,2,3],[4,5,6],[7,8,9]]
Output:
3 1 2
6 4 5
9 7 8
Explanation: After rotating the matrix looks like
1 2 3       2 3 1       3 1 2
4 5 6  =>  5 6 4  =>   6 4 5
7 8 9       8 9 7       9 7 8
Expected Time Complexity: O(n*m)
Expected Auxillary Space: O(n*m)

Constraints:
1<= mat.size, mat[0].size, mat[i][j] <=1000
1<=k<=10000

.........

