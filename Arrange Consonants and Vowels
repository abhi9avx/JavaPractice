public Node arrangeCV(Node head){
        
        HashSet<Character> vowelSet = new HashSet<>();
        
        vowelSet.add('a');
        vowelSet.add('e');
        vowelSet.add('i');
        vowelSet.add('o');
        vowelSet.add('u');
        
        Node newHead = head;
        Node consHead = new Node(' '); // Dummy node for consonants
        Node vowelHead = new Node(' '); // Dummy node for vowels
        Node cons = consHead;
        Node vowel = vowelHead;
        
        while (newHead != null) {
            if (vowelSet.contains(newHead.data)) {
                vowel.next = newHead;
                vowel = vowel.next;
            } else {
                cons.next = newHead;
                cons = cons.next;
            }
            newHead = newHead.next;
        }
        
        // Connect the vowel list to the consonant list
        vowel.next = consHead.next;
        // Ensure the end of the list
        cons.next = null;
        
        // Return the head of the combined list
        return vowelHead.next;
    }


Given a singly linked list having n nodes containing english alphabets ('a'-'z'). Rearrange the linked list in such a way that all the vowels come before the consonants while maintaining the order of their arrival. 

Example 1:

Input:
n = 9
linked list: a -> b -> c -> d -> e -> f -> g -> h -> i 
Output: 
a -> e -> i -> b -> c -> d -> f -> g -> h
Explanation: 
After rearranging the input linked list according to the condition the resultant linked list will be as shown in output.
Example 2:

Input:
n = 8
linked list: a -> b -> a -> b -> d -> e -> e -> d 
Output: 
a -> a -> e -> e -> b -> b -> d -> d
Explanation: 
After rearranging the input linked list according to the condition the resultant linked list will be as shown in output.
Your Task:
Your task is to complete the function arrangeCV(), which takes head of linked list and arranges the list in such a way that all the vowels come before the consonants while maintaining the order of their arrival and returns the head of the updated linked list.

Expected Time Complexity :  O(n)
Expected Auxiliary Space :  O(1)

Constraints:
1 <= n <= 104
'a' <= elements of linked list <= 'z'

