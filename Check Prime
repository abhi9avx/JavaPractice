Given an integer n check if n is prime or not.
A prime number is a number that is divisible by 1 and itself only.

Example 1:

Input:
n = 17
Output: 
True
Explanation:
17 is  divisible by  only 1 and 17.
So it's a prime number.
Example 2:

Input:
n = 56
Output: 
False
Explanation:
56 is divisible by 2, 4, 7.....etc. So
its not a prime number.
Your Task:
The input n is provided as a parameter to the function prime. Complete the given code so that it returns a boolean value. Don't print anything.
 

Expected Time Complexity: O(n)
Expected Auxilary Space: O(n)

...........
public static boolean prime(int number) {
    if (number <= 1) {
        return false; // Numbers less than or equal to 1 are not prime
    }
    
    if (number <= 3) {
        return true; // 2 and 3 are prime
    }
    
    if (number % 2 == 0 || number % 3 == 0) {
        return false; // Divisible by 2 or 3
    }
    
    // Check divisibility starting from 5 up to the square root of the number
    for (int i = 5; i * i <= number; i += 6) {
        if (number % i == 0 || number % (i + 2) == 0) {
            return false;
        }
    }
    
    return true; // No divisors found
}
