Kth common ancestor in a tree

................
Given a Tree with n (n>=2) nodes, find the kth common ancestor of nodes x and y in the given tree. Return -1 if kth ancestor does not exist.

Nodes x and y will always be present in the input of a tree, and x != y.

Example 1:

Input: 
Input tree

k = 2, x = 20, y = 30 
Output:
40
Explanation:
Their 2nd common ancestor is 40.
Example 2:

Input: 
Input tree

k = 2, x = 70, y = 60
Output:
-1
Explanation:
LCA of 70 and 60 is 80, which is root itself. There does not exists 2nd common ancestor in this case.
Your task :
You don't have to read input or print anything. Your task is to complete the function kthCommonAncestor() that takes the root of the tree, k, x and y as input and returns the kth common ancestor of x and y.
 
Expected Time Complexity: O(Height of the Tree)
Expected Space Complexity: O(Height of the Tree)
 
Your Task :
1 <= n, k <= 105
1 <= node->data, x, y <= 109


.......


class Solution {
public:
    int kthCommonAncestor(Node *root, int k, int x, int y) {
        // Calculating LCA(Lowest Common Ancestor)
        // Time: O(Height of the BST); Space: O(1)
        Node* LCA = root;
        while(LCA) {
            if(LCA->data > x && LCA->data > y) LCA = LCA->left;
            else if(LCA->data < x && LCA->data < y) LCA = LCA->right;
            else break;
        }
        
        // Finding Parent of Nodes from root to LCA
        // Time: O(Height of the BST); Space: O(Height of the BST)
        Node* temp = root;
        Node* prev = NULL;
        unordered_map<Node*, Node*> parent;
        while(temp != LCA) {
            parent[temp] = prev;
            prev = temp;
            
            if(LCA->data > temp->data) temp = temp->right;
            else temp = temp->left;
        }
        parent[LCA] = prev;
        
        // Calculating final result
        // // Time: O(Height of the BST); Space: O(1)
        k = k - 1;
        while(k--) {
            if(temp == root) return -1;
            temp = parent[temp];
        }
        
        return temp->data;
    }
};

