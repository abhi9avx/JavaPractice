class Solution
{
    /*class Node {
    	int data;
    	Node left;
    	Node right;
    
    	Node(int data) {
    		this.data = data;
    		left = null;
    		right = null;
    	}
    }*/
    static int timeTaken;
    public static int minTime(Node root, int target) 
    {
        timeTaken=0;
        solve(root,target);
        return timeTaken;
    }
    
    static Info solve(Node root,int target){
        if(root==null)
        return new Info(false,-1);
        Info left=solve(root.left,target);
        Info right=solve(root.right,target);
        
        int max=1+Math.max(left.height,right.height);
        //timeTaken=Math.max(timeTaken,max);
        if(root.data==target){
            // check and update height with children
            timeTaken=Math.max(timeTaken,max);
            right.fireSet=true;
            right.height=0;
            return right;
        }
        if(left.fireSet){
            timeTaken=Math.max(timeTaken,left.height+right.height+2);
            left.height+=1;
            return left;
        }
        if(right.fireSet){
            timeTaken=Math.max(timeTaken,left.height+right.height+2);
            right.height+=1;
            return right;
        }
        left.height=max;
        return left;
    }
    
    
    static class Info{
        boolean fireSet;
        int height;
        Info(boolean fireSet,int height){
            this.fireSet=fireSet;
            this.height=height;
        }
    }
}

.......
Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values.


Examples : 

Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10
Target Node = 8
Output: 7
Explanation: If leaf with the value 8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.
Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      7
  /    / 
 8    10
Target Node = 10
Output: 5

Expected Time Complexity: O(number of nodes)
Expected Auxiliary Space: O(height of tree)


Constraints:
1 ≤ number of nodes ≤ 105

1 ≤ values of nodes ≤ 105
