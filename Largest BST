vector<int> fun(Node* root,int &mx){
    if(root->left==NULL&&root->right==NULL)return {root->data,root->data,1};
    if(root->right==NULL){
        auto ls=fun(root->left,mx);
        if(ls[2]&&ls[1]<root->data){
            mx=max(mx,ls[2]+1);
            return {min(ls[0],root->data),max(ls[1],root->data),ls[2]+1};
        }
    }
    else if(root->left==NULL){
         auto ls=fun(root->right,mx);
        if(ls[2]&&ls[0]>root->data){
            mx=max(mx,ls[2]+1);
            return {min(ls[0],root->data),max(ls[1],root->data),ls[2]+1};
        }
    }
    else{
          auto ls=fun(root->left,mx);
          auto rs=fun(root->right,mx);
           if(ls[2]&&rs[2]&&ls[1]<root->data&&root->data<rs[0]){
            mx=max(mx,ls[2]+rs[2]+1);
            return {min(ls[0],root->data),max(rs[1],root->data),ls[2]+rs[2]+1};
        }
    }
    return {0,0,0};
}
class Solution{
    public:
    int largestBst(Node *root)
    {
        int mx=1;
        auto k=fun(root,mx);
        return mx;
    }
};

...................

Given a binary tree. Find the size of its largest subtree which is a Binary Search Tree.
Note: Here Size equals the number of nodes in the subtree.

Examples :

Input:   1
        /  \
        4   4              
       / \ 
      6   8
Output: 1 
Explanation: There's no sub-tree with size greater than 1 which forms a BST. All the leaf Nodes are the BSTs with size equal to 1.

Input:    6
        /   \
      6      2              
       \    / \
        2  1   3
Output: 3
Explanation: The following sub-tree is a BST of size 3:  2
                                                       /   \
                                                      1     3
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(Height of the BST).

Constraints:
1 ≤ Number of nodes ≤ 105
1 ≤ Data of a node ≤ 106

..........

