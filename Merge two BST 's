void merge(Node *root, vector<int>&v)
      {
          if(root==NULL)
          return;
          merge(root->left,v);
          v.push_back(root->data);
          merge(root->right,v);
      }
    vector<int> merge(Node *root1, Node *root2) {
        vector<int>v1,v2,count;
        merge(root1,v1);
        merge(root2,v2);
        int i=0,j=0;
        while(i<v1.size() && j<v2.size())
        {
            if(v1[i]<=v2[j])
            count.push_back(v1[i++]);
            else
            count.push_back(v2[j++]);
        }
        while(i<v1.size())
        count.push_back(v1[i++]);
        while(j<v2.size())
        count.push_back(v2[j++]);
      return count;
    }

............

Given two BSTs, return elements of merged BSTs in sorted form.

Examples :

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.
Input:
BST1:
       12
     /   
    9
   / \    
  6   11
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: After merging and sorting the two BST we get 2 5 6 8 9 10 11 12.
Expected Time Complexity: O(m+n)
Expected Auxiliary Space: O(Height of BST1 + Height of BST2 + m + n)

Constraints:
1 ≤ Number of Nodes ≤ 105
