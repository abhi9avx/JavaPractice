static bool cmp(pair<int,int>a,pair<int,int>b){
        if(a.second!=b.second)
            return a.second<b.second;
        
        return a.first<b.first;
    }
    
    int maxMeetings(int n, int start[], int end[]) {
        // Your code here

       // storing the start and end time 
        vector<pair<int,int>>start_end;
        for(int i=0;i<n;i++){
            start_end.push_back(make_pair(start[i],end[i]));
        }
        
        // sorting on the basis of end time. As smaller the end time 
        // more number of meetings can be held. 
        sort(start_end.begin(),start_end.end(),cmp);
        

       // if n>0 , atleast one meeting can always occur.
        int count=1;
        int end_time=start_end[0].second;
        for(int i=1;i<n;i++){
            if(end_time<start_end[i].first){
                count++;
                end_time=start_end[i].second;
            }
        }
        
        
        return count;
    }

..............

You are given timings of n meetings in the form of (start[i], end[i]) where start[i] is the start time of meeting i and end[i] is the finish time of meeting i. Return the maximum number of meetings that can be accommodated in a single meeting room, when only one meeting can be held in the meeting room at a particular time. 

Note: The start time of one chosen meeting can't be equal to the end time of the other chosen meeting.

Examples :

Input: n = 6, start[] = [1, 3, 0, 5, 8, 5], end[] =  [2, 4, 6, 7, 9, 9]
Output: 4
Explanation: Maximum four meetings can be held with given start and end timings. The meetings are - (1, 2), (3, 4), (5,7) and (8,9)
Input: n = 3, start[] = [10, 12, 20], end[] = [20, 25, 30]
Output: 1
Explanation: Only one meetings can be held with given start and end timings.
Expected Time Complexity: O(n*logn)
Expected Auxilliary Space: O(n)

Constraints:
1 ≤ n ≤ 105
0 ≤ start[i] < end[i] ≤ 106

...................
