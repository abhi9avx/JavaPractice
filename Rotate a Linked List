int size(Node node){
        int cnt=0;
        while(node!=null){
            node=node.next;
            cnt++;
        }
        return cnt;
    }
    
    public Node rotate(Node head, int k) {
        if(head.next==null)return head;
        int s=size(head);
        k=(s-k)%s;
        while(k-->0){
            Node node=head;
            while(node.next!=null && node.next.next!=null){
                node=node.next;
            }
            node.next.next=head;
            head=node.next;
            node.next=null;
        }
        
        return head;
    }

........

Given the head of a singly linked list, the task is to rotate the linked list clockwise by k nodes, i.e., left-shift the linked list by k nodes, where k is a given positive integer smaller than or equal to length of the linked list.

Examples:

Input: linkedlist: 2->4->7->8->9 , k = 3
Output: 8->9->2->4->7
Explanation:
Rotate 1: 4 -> 7 -> 8 -> 9 -> 2
Rotate 2: 7 -> 8 -> 9 -> 2 -> 4
Rotate 3: 8 -> 9 -> 2 -> 4 -> 7

Input: linkedlist: 1->2->3->4->5->6->7->8 , k = 4
Output: 5->6->7->8->1->2->3->4

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= number of nodes <= 103
1 <= node -> data <= 104
1 <= k <= number of nodes 
