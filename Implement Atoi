Given a string, s, the objective is to convert it into integer format without utilizing any built-in functions. If the conversion is not feasible, the function should return -1.

Note: Conversion is feasible only if all characters in the string are numeric or if its first character is '-' and rest are numeric.

Example 1:

Input:
s = "-123"
Output: 
-123
Explanation:
It is possible to convert -123 into an integer 
and is so returned in the form of an integer
Example 2:

Input:
s = "21a"
Output: 
-1
Explanation: 
The output is -1 as, due to the inclusion of 'a',
the given string cannot be converted to an integer.
Your Task:
You do not have to take any input or print anything. Complete the function atoi() which takes a string s as an input parameter and returns an integer value representing the given string. If the conversion is not feasible, the function should return -1.

|s| = length of string str.
Expected Time Complexity: O( |s| ), 
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ |s| ≤ 10

...............

class Solution
{
    int atoi(String s) {
        // Check if the string is empty
        if (s == null || s.length() == 0)
            return -1;
        
        int result = 0;
        int startIndex = 0;
        boolean isNegative = false;
        
        // Check for negative sign
        if (s.charAt(0) == '-') {
            isNegative = true;
            startIndex = 1;
        }
        
        // Iterate over the string to convert characters to integers
        for (int i = startIndex; i < s.length(); i++) {
            char c = s.charAt(i);
            
            // Check if the character is numeric
            if (Character.isDigit(c)) {
                int digit = c - '0'; // Convert char to int
                
                // Check for overflow
                if (isNegative && (Integer.MIN_VALUE / 10 > result || Integer.MIN_VALUE / 10 == result && Integer.MIN_VALUE % 10 > digit))
                    return -1;
                else if (!isNegative && (Integer.MAX_VALUE / 10 < result || Integer.MAX_VALUE / 10 == result && Integer.MAX_VALUE % 10 < digit))
                    return -1;
                
                // Update result
                result = result * 10 + digit;
            } else {
                // If non-numeric character encountered, return -1
                return -1;
            }
        }
        
        // If the number is negative, make it negative
        if (isNegative)
            result *= -1;
        
        return result;
    }
}

